name: Update Portfolio

on:
  # Run this workflow on a schedule (every 10 minutes)
  schedule:
    - cron: '*/10 * * * *'  # Runs every 10 minutes
  
  # Run this workflow when you push to the main branch
  push:
    branches: [ main ]
  
  # Allow manual triggering
  workflow_dispatch:

# Add permissions for the GITHUB_TOKEN
permissions:
  contents: write  # Needed to push commits
  actions: read    # Needed to read workflow information

jobs:
  update-portfolio:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for proper change detection
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies with retry
        run: |
          # Try multiple approaches to install @octokit/rest
          npm config set registry https://registry.npmjs.org/
          npm cache clean --force || true
          
          # Try installing with retries
          for i in {1..3}; do
            echo "Attempt $i to install @octokit/rest"
            if npm install @octokit/rest@latest; then
              echo "Successfully installed @octokit/rest"
              break
            else
              echo "Attempt $i failed, waiting 10 seconds before retry..."
              sleep 10
              if [ $i -eq 3 ]; then
                echo "All attempts failed, trying alternative method..."
                # Try installing a specific stable version instead of latest
                npm install @octokit/rest@19.0.13 || npm install @octokit/rest@18.12.0 || exit 1
              fi
            fi
          done
        
      - name: Check for actual GitHub repository changes
        id: check_changes
        run: |
          # Get the last commit by Clove Twilight [BOT]
          LAST_BOT_COMMIT=$(git log --author="Clove Twilight \[BOT\]" -n 1 --format="%H" 2>/dev/null || echo "")
          
          if [ -n "$LAST_BOT_COMMIT" ]; then
            # Check if there are actual repository changes since the last bot commit
            USER_CHANGES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/users/clovetwilight3/repos?sort=updated&direction=desc&per_page=20")
            
            # Check specific organization repos (only UnifiedGaming-Systems, not Epic-Games)
            ORG_CHANGES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/orgs/UnifiedGaming-Systems/repos?sort=updated&direction=desc&per_page=20")
            
            # Extract timestamp of most recent repo updates
            USER_LATEST_UPDATE=$(echo "$USER_CHANGES" | grep -o '"updated_at": "[^"]*"' | head -1 | cut -d'"' -f4)
            ORG_LATEST_UPDATE=$(echo "$ORG_CHANGES" | grep -o '"updated_at": "[^"]*"' | head -1 | cut -d'"' -f4)
            
            USER_LATEST_TIMESTAMP=0
            ORG_LATEST_TIMESTAMP=0
            
            # Convert timestamps to Unix time
            if [ ! -z "$USER_LATEST_UPDATE" ]; then
              USER_LATEST_TIMESTAMP=$(date -d "$USER_LATEST_UPDATE" +%s)
            fi
            
            if [ ! -z "$ORG_LATEST_UPDATE" ]; then
              ORG_LATEST_TIMESTAMP=$(date -d "$ORG_LATEST_UPDATE" +%s)
            fi
            
            # Find the most recent timestamp
            if [ $USER_LATEST_TIMESTAMP -gt $ORG_LATEST_TIMESTAMP ]; then
              LATEST_TIMESTAMP=$USER_LATEST_TIMESTAMP
            else
              LATEST_TIMESTAMP=$ORG_LATEST_TIMESTAMP
            fi
            
            # Get timestamp of the last bot commit
            LAST_BOT_TIMESTAMP=$(git show -s --format=%ct "$LAST_BOT_COMMIT")
            
            if [ $LATEST_TIMESTAMP -gt $LAST_BOT_TIMESTAMP ]; then
              echo "has_updates=true" >> $GITHUB_OUTPUT
            else
              echo "has_updates=false" >> $GITHUB_OUTPUT
            fi
          else
            # No previous bot commits, so definitely run
            echo "has_updates=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Fetch and filter repositories
        if: steps.check_changes.outputs.has_updates == 'true' || github.event_name != 'schedule'
        run: |
          node .github/scripts/update-projects.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INCLUDE_ALL_REPOS: 'true'
          PRESERVE_TIMESTAMPS: 'true'  # New flag to control timestamp behavior
          
      - name: Fetch GitHub avatar for favicon
        if: steps.check_changes.outputs.has_updates == 'true' || github.event_name != 'schedule'
        run: |
          node .github/scripts/fetch-favicon.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Generate resume
        if: steps.check_changes.outputs.has_updates == 'true' || github.event_name != 'schedule'
        run: |
          node .github/scripts/generate-resume.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up temporary files
        if: steps.check_changes.outputs.has_updates == 'true' || github.event_name != 'schedule'
        run: |
          # Remove node_modules and package files created during the workflow
          rm -rf node_modules/
          rm -f package.json package-lock.json .resume-cache.json .avatar-cache.json custom_resume.pdf favicon.png
          
          # Remove any npm debug logs
          rm -f npm-debug.log* .npm/_logs/*
          
          # Remove any temporary cache files
          rm -rf .npm/
          
          # List what files we're keeping (for debugging)
          echo "Files remaining after cleanup:"
          ls -la
          
      - name: Commit and push if actual content changed
        if: steps.check_changes.outputs.has_updates == 'true' || github.event_name != 'schedule'
        run: |
          git config --global user.name 'Clove Twilight [BOT]'
          git config --global user.email 'noreply@clovetwilight3.co.uk'
          
          # Make sure we don't commit the temporary files that were cleaned up
          git add -A
          
          # Only commit if there are non-timestamp changes to actual content files
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            # Check if changes are only to meaningful files (not temp files)
            MEANINGFUL_CHANGES=$(git diff --staged --name-only | grep -E '\.(md|html|ico|png|js)$' | wc -l)
            
            if [ $MEANINGFUL_CHANGES -gt 0 ]; then
              git commit -m "Update portfolio with latest projects"
              git push
              echo "Committed $MEANINGFUL_CHANGES meaningful file changes"
            else
              echo "No meaningful changes detected. Skipping commit."
              git reset
            fi
          fi
